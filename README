# Chartify

A modern music streaming web application that allows users to discover, search, and play music with a beautiful and intuitive interface. Built with React and integrated with the Deezer API to provide access to millions of tracks.

## Features

- 🎵 **Music Player** - Full-featured music player with play/pause, next/previous track, and volume controls
- 🔍 **Search Functionality** - Search for artists, albums, tracks, and playlists
- ❤️ **Favorites System** - Save your favorite tracks for easy access
- 🎨 **Genre Browsing** - Explore music by different genres
- 📱 **Responsive Design** - Works seamlessly on desktop and mobile devices
- 🎭 **Artist Profiles** - View detailed artist information and their top tracks
- 💿 **Album Views** - Browse complete album tracklists
- 📻 **Podcast Support** - Discover and listen to podcasts
- 🎯 **Top Charts** - Stay updated with trending music

## Demo

🎵 **Live Demo**: [https://chartify-5l7qu49z9-husseins-projects-8480eee7.vercel.app](https://chartify-5l7qu49z9-husseins-projects-8480eee7.vercel.app)

Simply click the link above to explore the application. No installation required!

### How to Use the Demo

1. **Browse Music** - Explore the home page to discover top charts and trending music
2. **Search** - Use the search bar to find your favorite artists, albums, or tracks
3. **Play Music** - Click on any track to start playing (30-second previews via Deezer API)
4. **Add to Favorites** - Click the heart icon to save tracks to your favorites
5. **Explore Genres** - Navigate through different music genres
6. **View Artist Profiles** - Click on any artist to see their top tracks and albums

## Technologies Used

- **React 19.2** - Frontend framework
- **React Router DOM** - Client-side routing
- **Context API** - State management for favorites and currently playing song
- **Tailwind CSS** - Styling and responsive design
- **Embla Carousel** - Smooth carousel components
- **Deezer API** - Music data and streaming
- **Vite** - Build tool and development server
- **Vercel** - Deployment and hosting

## Setup

### Prerequisites

- Node.js (version 14 or higher)
- npm or yarn

### Installation

1. Clone the repository:

```bash
git clone https://github.com/yourusername/chartify.git
cd chartify
```

2. Install dependencies:

```bash
npm install
```

3. Start the development server:

```bash
npm run dev
```

4. Open your browser and navigate to `http://localhost:5173`

### Building for Production

To create a production build:

```bash
npm run build
```

To preview the production build:

```bash
npm run preview
```

## Project Structure

```
Chartify/
├── api/                      # Vercel serverless functions
│   └── deezer.js            # API proxy for Deezer
├── public/
│   ├── images/
│   │   ├── albumCovers/
│   │   └── icons/
│   └── songs/
├── src/
│   ├── api/
│   │   ├── music.js          # Deezer API integration
│   │   └── search.js         # Search functionality
│   ├── assets/
│   │   └── main.css          # Global styles
│   ├── components/
│   │   ├── CustomCarousel.jsx
│   │   ├── FavouriteButton.jsx
│   │   ├── GenreItem.jsx
│   │   ├── MusicPlayer.jsx
│   │   ├── MusicPlayerVolume.jsx
│   │   ├── Search.jsx
│   │   ├── SideMenuItem.jsx
│   │   ├── SliderItem.jsx
│   │   └── SongRow.jsx
│   ├── context/
│   │   ├── FavouritesContext.jsx  # Favorites management
│   │   └── SongContext.jsx        # Currently playing song
│   ├── views/
│   │   ├── AlbumView.jsx
│   │   ├── ArtistView.jsx
│   │   ├── FavouritesView.jsx
│   │   ├── GenresView.jsx
│   │   ├── GenreView.jsx
│   │   ├── HomeView.jsx
│   │   ├── PlaylistView.jsx
│   │   ├── PodcastsView.jsx
│   │   ├── PodcastView.jsx
│   │   ├── SearchResults.jsx
│   │   └── TopTracksView.jsx
│   ├── App.jsx               # Main app component with routing
│   └── main.jsx              # Entry point
├── .gitignore
├── index.html
├── package.json
├── tailwind.config.js
├── vercel.json               # Vercel deployment config
└── vite.config.js
```

## Key Features Implementation

### Context API Usage

The application uses React Context API for state management:

- **SongContext** - Manages the currently playing song across the application
- **FavouritesContext** - Handles favorite tracks with localStorage persistence

### Client-Side Routing

React Router DOM is used to implement multiple pages:

- Home (`/`)
- Search Results (`/search/:query`)
- Artist View (`/artist/:id`)
- Album View (`/album/:id`)
- Genre Browsing (`/genres` and `/genre/:id`)
- Favorites (`/favourites`)
- Top Tracks (`/top-tracks`)
- Podcasts (`/podcasts` and `/podcast/:id`)
- Playlists (`/playlist/:id`)

### API Integration

The application integrates with the Deezer API through:

- **Development**: Vite proxy configuration (see `vite.config.js`)
- **Production**: Vercel serverless function (see `api/deezer.js`)

The API provides:

- Artist information and top tracks
- Album details and tracklists
- Genre-based music recommendations
- Search results for tracks, albums, and artists
- Podcast content

## Deployment

The application is deployed on Vercel with automatic HTTPS and global CDN. The `api/deezer.js` serverless function handles API requests and CORS issues in production.

## Future Enhancements

- User authentication and personal playlists
- Queue management for upcoming tracks
- Lyrics display
- Social sharing features
- Custom theme support
